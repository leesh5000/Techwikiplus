# 로컬 개발용: docker compose -f docker-compose.infra.yml up -d
# 운영 환경: docker compose -f docker-compose.infra.yml -f docker-compose.yml up -d --pull always (외부 이미지 우선 사용)

# 전역 기본 설정
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    compress: "true"

x-healthcheck: &default-healthcheck
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 30s

services:

  ###############################
  ### INFRASTRUCTURE SERVICES ###
  ###############################
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
    command:
      - sh
      - -c
      - |
        redis-server \                                                                                                                                   
          --appendonly yes \                                                                                                                             
          --requirepass "${REDIS_PASSWORD}" \                                                                                                            
          --maxmemory 256mb \                                                                                                                            
          --maxmemory-policy allkeys-lru
    networks:
      - infrastructure
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
  mysql:
    image: mysql:8.0.32
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max_connections=200
      - --innodb_buffer_pool_size=256M
    networks:
      - infrastructure
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT}:1025"  # SMTP port
      - "${MAILHOG_WEB_PORT}:8025"   # Web UI port
    networks:
      - infrastructure
    logging: *default-logging
    healthcheck:
      <<: *default-healthcheck
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  infrastructure:
    driver: bridge

volumes:
  redis-data:
    driver: local
  mysql-data:
    driver: local
